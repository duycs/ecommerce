.order-api:
  rules:
    - if: $CI_PIPELINE_SOURCE != 'web' && $CI_COMMIT_MESSAGE =~ /\[all\]/
    - if: $CI_PIPELINE_SOURCE != 'web' && $CI_COMMIT_MESSAGE =~ /\[order\]/
    - if: $CI_PIPELINE_SOURCE != 'web' && $CI_COMMIT_MESSAGE !~ /\[gateway\]/ && $CI_COMMIT_MESSAGE !~ /\[identity\]/ && $CI_COMMIT_MESSAGE !~ /\[ecommerce\]/ && $CI_COMMIT_MESSAGE !~ /\[order\]/ && $CI_COMMIT_MESSAGE !~ /\[synchronize\]/ && $CI_COMMIT_MESSAGE !~ /\[integration\]/ && $CI_COMMIT_MESSAGE !~ /\[notification\]/ && $CI_COMMIT_MESSAGE !~ /\[all\]/
      changes:
        - src/services/order/**/*
    - if: $CI_PIPELINE_SOURCE == "web" && ($SERVICES =~ /order/ || $SERVICES =~ /all/)

order-api 1/4:
  extends: .order-api
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop'
  stage: order-api
  inherit:
    default: false
  tags:
    - dev-vpc-vt
  script:
    - docker build . --build-arg ASPNETCORE_ENVIRONMENT=production -f src/services/order/Order.Api/Dockerfile -t ${DOCKER_PREFIX_STAGING}order-api:latest

order-api 2/4:
  extends: .order-api
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop'
  needs: [order-api 1/4]
  stage: order-api
  tags:
    - dev-vpc-vt
  script:
    - docker push ${DOCKER_PREFIX_STAGING}order-api:latest

order-api 3/4:
  extends: .order-api
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop'
  needs: [order-api 2/4]
  stage: order-api
  tags:
    - dev-vpc-vt
  script:
    - docker-compose -f $COMPOSE_FILE pull order-api

order-api 4/4:
  extends: .order-api
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop'
  needs: [order-api 3/4]
  stage: order-api
  inherit:
    default: false
  tags:
    - dev-vpc-vt
  script:
    - docker-compose -f $COMPOSE_FILE   up -d order-api
