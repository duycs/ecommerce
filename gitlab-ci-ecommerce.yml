.ecommerce-api:
  rules:
  - if: $CI_PIPELINE_SOURCE != 'web' && $CI_COMMIT_MESSAGE =~ /\[all\]/
  - if: $CI_PIPELINE_SOURCE != 'web' && $CI_COMMIT_MESSAGE =~ /\[ecommerce\]/
  - if: $CI_PIPELINE_SOURCE != 'web' && $CI_COMMIT_MESSAGE !~ /\[gateway\]/ && $CI_COMMIT_MESSAGE !~ /\[identity\]/ && $CI_COMMIT_MESSAGE !~ /\[ecommerce\]/ && $CI_COMMIT_MESSAGE !~ /\[order\]/ && $CI_COMMIT_MESSAGE !~ /\[synchronize\]/ && $CI_COMMIT_MESSAGE !~ /\[integration\]/ && $CI_COMMIT_MESSAGE !~ /\[notification\]/ && $CI_COMMIT_MESSAGE !~ /\[all\]/
    changes:
      - src/services/ecommerce/**/*
  - if: $CI_PIPELINE_SOURCE == "web" && ($SERVICES =~ /ecommerce/ || $SERVICES =~ /all/)

ecommerce-api 1/4:
  extends: .ecommerce-api
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop'
  stage: ecommerce-api
  inherit:
    default: false
  tags:
    - dev-vpc-vt
  script:
    - docker build . --build-arg ASPNETCORE_ENVIRONMENT=production -f src/services/ecommerce/ECommerce.Api/Dockerfile -t ${DOCKER_PREFIX_STAGING}ecommerce-api:latest

ecommerce-api 2/4:
  extends: .ecommerce-api
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop'
  needs: [ecommerce-api 1/4]
  stage: ecommerce-api
  tags:
    - dev-vpc-vt
  script:
    - docker push ${DOCKER_PREFIX_STAGING}ecommerce-api:latest

ecommerce-api 3/4:
  extends: .ecommerce-api
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop'
  needs: [ecommerce-api 2/4]
  stage: ecommerce-api
  tags:
    - dev-vpc-vt
  script:
    - docker-compose -f $COMPOSE_FILE pull ecommerce-api

ecommerce-api 4/4:
  extends: .ecommerce-api
  rules:
    - if: $CI_COMMIT_BRANCH == 'develop'
  needs: [ecommerce-api 3/4]
  stage: ecommerce-api
  inherit:
    default: false
  tags:
    - dev-vpc-vt
  script:
    - docker-compose -f $COMPOSE_FILE   up -d ecommerce-api
