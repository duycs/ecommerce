// <auto-generated />
using System;
using ECommerce.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

namespace ECommerce.Api.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    [Migration("20211208150835_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.BrandAggregate.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("meta_keywords");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("priority");

                    b.Property<string>("Slug")
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.HasKey("Id")
                        .HasName("pk_brands");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_brands_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_brands_name");

                    b.ToTable("brands");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.CartAggregate.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.HasKey("Id")
                        .HasName("pk_carts");

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasDatabaseName("ix_carts_customer_id");

                    b.ToTable("carts");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.CartAggregate.CartDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uuid")
                        .HasColumnName("cart_id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductChildId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_child_id");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_cart_details");

                    b.HasIndex("ProductChildId")
                        .HasDatabaseName("ix_cart_details_product_child_id");

                    b.HasIndex("CartId", "ProductChildId")
                        .IsUnique()
                        .HasDatabaseName("ix_cart_details_cart_id_product_child_id");

                    b.ToTable("cart_details");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.CustomerAggregate.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("ExtraPhoneNumbers")
                        .HasColumnType("text")
                        .HasColumnName("extra_phone_numbers");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<decimal>("Liabilities")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m)
                        .HasColumnName("liabilities");

                    b.Property<decimal>("MaxLiabilities")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m)
                        .HasColumnName("max_liabilities");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_customers_phone_number");

                    b.ToTable("customers");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.CustomerAggregate.CustomerAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("receiver_name");

                    b.Property<string>("ReceiverPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("receiver_phone_number");

                    b.Property<Guid?>("WardId")
                        .HasColumnType("uuid")
                        .HasColumnName("ward_id");

                    b.HasKey("Id")
                        .HasName("pk_customer_addresses");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_customer_addresses_customer_id");

                    b.HasIndex("WardId")
                        .HasDatabaseName("ix_customer_addresses_ward_id");

                    b.ToTable("customer_addresses");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.LocationAggregate.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uuid")
                        .HasColumnName("province_id");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_districts");

                    b.HasIndex("ProvinceId")
                        .HasDatabaseName("ix_districts_province_id");

                    b.ToTable("districts");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.LocationAggregate.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_provinces");

                    b.ToTable("provinces");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.LocationAggregate.Ward", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<string>("Type")
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_wards");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_wards_district_id");

                    b.ToTable("wards");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ProductAggregate.BestSellingProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("pk_best_selling_products");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasDatabaseName("ix_best_selling_products_product_id");

                    b.ToTable("best_selling_products");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ProductAggregate.NewProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("pk_new_products");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasDatabaseName("ix_new_products_product_id");

                    b.ToTable("new_products");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ProductAggregate.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uuid")
                        .HasColumnName("brand_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string[]>("Images")
                        .HasColumnType("text[]")
                        .HasColumnName("images");

                    b.Property<bool>("IsSellFullSize")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sell_full_size");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("text")
                        .HasColumnName("meta_keywords");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("search_vector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Sku" });

                    b.Property<Guid>("ShopId")
                        .HasColumnType("uuid")
                        .HasColumnName("shop_id");

                    b.Property<string>("SiteTitle")
                        .HasColumnType("text")
                        .HasColumnName("site_title");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sku");

                    b.Property<string>("ThumbImage")
                        .HasColumnType("text")
                        .HasColumnName("thumb_image");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uuid")
                        .HasColumnName("unit_id");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("BrandId")
                        .HasDatabaseName("ix_products_brand_id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_category_id");

                    b.HasIndex("SearchVector")
                        .HasDatabaseName("ix_products_search_vector")
                        .HasMethod("GIN");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("ix_products_shop_id");

                    b.ToTable("products");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ProductAggregate.ProductChild", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid[]>("AttributeValueIds")
                        .HasColumnType("uuid[]")
                        .HasColumnName("attribute_value_ids");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<long>("QuantityInStock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("quantity_in_stock");

                    b.Property<string>("Sku")
                        .HasColumnType("text")
                        .HasColumnName("sku");

                    b.HasKey("Id")
                        .HasName("pk_product_children");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_children_product_id");

                    b.HasIndex("Sku")
                        .IsUnique()
                        .HasDatabaseName("ix_product_children_sku");

                    b.ToTable("product_children");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ProductAggregate.ProductPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<bool>("IsLimitQuantity")
                        .HasColumnType("boolean")
                        .HasColumnName("is_limit_quantity");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0m)
                        .HasColumnName("price");

                    b.Property<decimal?>("PriceDiscount")
                        .HasColumnType("numeric")
                        .HasColumnName("price_discount");

                    b.Property<Guid>("ProductChildId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_child_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("QuantityFrom")
                        .HasColumnType("integer")
                        .HasColumnName("quantity_from");

                    b.Property<int>("QuantityTo")
                        .HasColumnType("integer")
                        .HasColumnName("quantity_to");

                    b.HasKey("Id")
                        .HasName("pk_product_prices");

                    b.HasIndex("ProductChildId")
                        .HasDatabaseName("ix_product_prices_product_child_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_prices_product_id");

                    b.ToTable("product_prices");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ProductAggregate.SuggestProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("pk_suggest_products");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasDatabaseName("ix_suggest_products_product_id");

                    b.ToTable("suggest_products");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ProductAttributeAggregate.ProductAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("priority");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("pk_product_attributes");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_attributes_product_id");

                    b.ToTable("product_attributes");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ProductAttributeAggregate.ProductAttributeValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid")
                        .HasColumnName("attribute_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("priority");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_product_attribute_values");

                    b.HasIndex("AttributeId")
                        .HasDatabaseName("ix_product_attribute_values_attribute_id");

                    b.ToTable("product_attribute_values");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ProductCategoryAggregate.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(600)
                        .HasColumnType("character varying(600)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaKeywords")
                        .HasMaxLength(160)
                        .HasColumnType("character varying(160)")
                        .HasColumnName("meta_keywords");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("priority");

                    b.Property<string>("SiteTitle")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("site_title");

                    b.Property<string>("Slug")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("slug");

                    b.HasKey("Id")
                        .HasName("pk_product_categories");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_product_categories_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_product_categories_name");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_product_categories_parent_id");

                    b.ToTable("product_categories");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ShopAggregate.Shop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("CoverImage")
                        .HasColumnType("text")
                        .HasColumnName("cover_image");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("ImageList")
                        .HasColumnType("text")
                        .HasColumnName("image_list");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("text")
                        .HasColumnName("meta_description");

                    b.Property<string>("MetaKeywords")
                        .HasColumnType("text")
                        .HasColumnName("meta_keywords");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("SiteTitle")
                        .HasColumnType("text")
                        .HasColumnName("site_title");

                    b.Property<string>("ThumbImage")
                        .HasColumnType("text")
                        .HasColumnName("thumb_image");

                    b.Property<string>("Video")
                        .HasColumnType("text")
                        .HasColumnName("video");

                    b.Property<Guid>("WardId")
                        .HasColumnType("uuid")
                        .HasColumnName("ward_id");

                    b.HasKey("Id")
                        .HasName("pk_shops");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_shops_code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_shops_name");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_shops_phone_number");

                    b.HasIndex("WardId")
                        .HasDatabaseName("ix_shops_ward_id");

                    b.ToTable("shops");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ShopAggregate.ShopBankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccountHolder")
                        .HasColumnType("text")
                        .HasColumnName("account_holder");

                    b.Property<string>("BranchName")
                        .HasColumnType("text")
                        .HasColumnName("branch_name");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NumberAccount")
                        .HasColumnType("text")
                        .HasColumnName("number_account");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("uuid")
                        .HasColumnName("shop_id");

                    b.HasKey("Id")
                        .HasName("pk_shop_bank_accounts");

                    b.HasIndex("NumberAccount")
                        .IsUnique()
                        .HasDatabaseName("ix_shop_bank_accounts_number_account");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("ix_shop_bank_accounts_shop_id");

                    b.ToTable("shop_bank_accounts");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.SystemConfigurationAggregate.SystemConfiguration", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("priority");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Key")
                        .HasName("pk_system_configurations");

                    b.ToTable("system_configurations");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.CartAggregate.Cart", b =>
                {
                    b.HasOne("ECommerce.Domain.AggregateModels.CustomerAggregate.Customer", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("ECommerce.Domain.AggregateModels.CartAggregate.Cart", "CustomerId")
                        .HasConstraintName("fk_carts_customers_customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.CartAggregate.CartDetail", b =>
                {
                    b.HasOne("ECommerce.Domain.AggregateModels.CartAggregate.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .HasConstraintName("fk_cart_details_carts_cart_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Domain.AggregateModels.ProductAggregate.ProductChild", "ProductChild")
                        .WithMany("CartDetails")
                        .HasForeignKey("ProductChildId")
                        .HasConstraintName("fk_cart_details_product_children_product_child_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("ProductChild");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.CustomerAggregate.CustomerAddress", b =>
                {
                    b.HasOne("ECommerce.Domain.AggregateModels.CustomerAggregate.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("fk_customer_addresses_customers_customer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Domain.AggregateModels.LocationAggregate.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId")
                        .HasConstraintName("fk_customer_addresses_wards_ward_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Customer");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.LocationAggregate.District", b =>
                {
                    b.HasOne("ECommerce.Domain.AggregateModels.LocationAggregate.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("fk_districts_provinces_province_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.LocationAggregate.Ward", b =>
                {
                    b.HasOne("ECommerce.Domain.AggregateModels.LocationAggregate.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("fk_wards_districts_district_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ProductAggregate.BestSellingProduct", b =>
                {
                    b.HasOne("ECommerce.Domain.AggregateModels.ProductAggregate.Product", "Product")
                        .WithOne("BestSellingProduct")
                        .HasForeignKey("ECommerce.Domain.AggregateModels.ProductAggregate.BestSellingProduct", "ProductId")
                        .HasConstraintName("fk_best_selling_products_products_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ProductAggregate.NewProduct", b =>
                {
                    b.HasOne("ECommerce.Domain.AggregateModels.ProductAggregate.Product", "Product")
                        .WithOne("NewProduct")
                        .HasForeignKey("ECommerce.Domain.AggregateModels.ProductAggregate.NewProduct", "ProductId")
                        .HasConstraintName("fk_new_products_products_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ProductAggregate.Product", b =>
                {
                    b.HasOne("ECommerce.Domain.AggregateModels.BrandAggregate.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("fk_products_brands_brand_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ECommerce.Domain.AggregateModels.ProductCategoryAggregate.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_products_product_categories_category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Domain.AggregateModels.ShopAggregate.Shop", "Shop")
                        .WithMany("ParentProducts")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("fk_products_shops_shop_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ProductAggregate.ProductChild", b =>
                {
                    b.HasOne("ECommerce.Domain.AggregateModels.ProductAggregate.Product", "Product")
                        .WithMany("Children")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_product_children_products_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ProductAggregate.ProductPrice", b =>
                {
                    b.HasOne("ECommerce.Domain.AggregateModels.ProductAggregate.ProductChild", "ProductChild")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductChildId")
                        .HasConstraintName("fk_product_prices_product_children_product_child_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Domain.AggregateModels.ProductAggregate.Product", "ParentProduct")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_product_prices_products_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentProduct");

                    b.Navigation("ProductChild");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ProductAggregate.SuggestProduct", b =>
                {
                    b.HasOne("ECommerce.Domain.AggregateModels.ProductAggregate.Product", "Product")
                        .WithOne("SuggestProduct")
                        .HasForeignKey("ECommerce.Domain.AggregateModels.ProductAggregate.SuggestProduct", "ProductId")
                        .HasConstraintName("fk_suggest_products_products_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ProductAttributeAggregate.ProductAttribute", b =>
                {
                    b.HasOne("ECommerce.Domain.AggregateModels.ProductAggregate.Product", "Product")
                        .WithMany("Attributes")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("fk_product_attributes_products_product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ProductAttributeAggregate.ProductAttributeValue", b =>
                {
                    b.HasOne("ECommerce.Domain.AggregateModels.ProductAttributeAggregate.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductAttributeValues")
                        .HasForeignKey("AttributeId")
                        .HasConstraintName("fk_product_attribute_values_product_attributes_product_attribu")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ProductCategoryAggregate.ProductCategory", b =>
                {
                    b.HasOne("ECommerce.Domain.AggregateModels.ProductCategoryAggregate.ProductCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_product_categories_product_categories_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ShopAggregate.Shop", b =>
                {
                    b.HasOne("ECommerce.Domain.AggregateModels.LocationAggregate.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardId")
                        .HasConstraintName("fk_shops_wards_ward_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ShopAggregate.ShopBankAccount", b =>
                {
                    b.HasOne("ECommerce.Domain.AggregateModels.ShopAggregate.Shop", "Shop")
                        .WithMany("ShopBankAccounts")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("fk_shop_bank_accounts_shops_shop_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.BrandAggregate.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.CartAggregate.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.CustomerAggregate.Customer", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("CustomerAddresses");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.LocationAggregate.District", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.LocationAggregate.Province", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ProductAggregate.Product", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("BestSellingProduct");

                    b.Navigation("Children");

                    b.Navigation("NewProduct");

                    b.Navigation("ProductPrices");

                    b.Navigation("SuggestProduct");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ProductAggregate.ProductChild", b =>
                {
                    b.Navigation("CartDetails");

                    b.Navigation("ProductPrices");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ProductAttributeAggregate.ProductAttribute", b =>
                {
                    b.Navigation("ProductAttributeValues");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ProductCategoryAggregate.ProductCategory", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ECommerce.Domain.AggregateModels.ShopAggregate.Shop", b =>
                {
                    b.Navigation("ParentProducts");

                    b.Navigation("ShopBankAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
