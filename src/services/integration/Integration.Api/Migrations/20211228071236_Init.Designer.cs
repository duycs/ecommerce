// <auto-generated />
using System;
using Integration.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Integration.Api.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    [Migration("20211228071236_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Integration.Domain.AggregateModels.AttributeMapping", b =>
                {
                    b.Property<Guid>("AttributeValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("attribute_value_id");

                    b.Property<long>("OldId")
                        .HasColumnType("bigint")
                        .HasColumnName("old_id");

                    b.HasKey("AttributeValueId")
                        .HasName("pk_attribute_mappings");

                    b.ToTable("attribute_mappings", "integration");
                });

            modelBuilder.Entity("Integration.Domain.AggregateModels.BrandMapping", b =>
                {
                    b.Property<Guid>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("brand_id");

                    b.Property<long>("OldId")
                        .HasColumnType("bigint")
                        .HasColumnName("old_id");

                    b.HasKey("BrandId")
                        .HasName("pk_brand_mappings");

                    b.HasIndex("OldId")
                        .IsUnique()
                        .HasDatabaseName("ix_brand_mappings_old_id");

                    b.ToTable("brand_mappings", "integration");
                });

            modelBuilder.Entity("Integration.Domain.AggregateModels.CategoryMapping", b =>
                {
                    b.Property<long>("OldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("old_id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.None);

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.HasKey("OldId")
                        .HasName("pk_category_mappings");

                    b.ToTable("category_mappings", "integration");
                });

            modelBuilder.Entity("Integration.Domain.AggregateModels.ChildProductMapping", b =>
                {
                    b.Property<Guid>("ChildProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("child_product_id");

                    b.Property<long>("OldId")
                        .HasColumnType("bigint")
                        .HasColumnName("old_id");

                    b.HasKey("ChildProductId")
                        .HasName("pk_child_product_mappings");

                    b.HasIndex("OldId")
                        .IsUnique()
                        .HasDatabaseName("ix_child_product_mappings_old_id");

                    b.ToTable("child_product_mappings", "integration");
                });

            modelBuilder.Entity("Integration.Domain.AggregateModels.CustomerMapping", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<long>("OldId")
                        .HasColumnType("bigint")
                        .HasColumnName("old_id");

                    b.HasKey("CustomerId")
                        .HasName("pk_customer_mappings");

                    b.HasIndex("OldId")
                        .IsUnique()
                        .HasDatabaseName("ix_customer_mappings_old_id");

                    b.ToTable("customer_mappings", "integration");
                });

            modelBuilder.Entity("Integration.Domain.AggregateModels.OrderMapping", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<long>("OldId")
                        .HasColumnType("bigint")
                        .HasColumnName("old_id");

                    b.HasKey("OrderId")
                        .HasName("pk_order_mappings");

                    b.HasIndex("OldId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_mappings_old_id");

                    b.ToTable("order_mappings", "integration");
                });

            modelBuilder.Entity("Integration.Domain.AggregateModels.ProductMapping", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<long>("OldId")
                        .HasColumnType("bigint")
                        .HasColumnName("old_id");

                    b.HasKey("ProductId")
                        .HasName("pk_product_mappings");

                    b.HasIndex("OldId")
                        .IsUnique()
                        .HasDatabaseName("ix_product_mappings_old_id");

                    b.ToTable("product_mappings", "integration");
                });

            modelBuilder.Entity("Integration.Domain.AggregateModels.SystemLogAggregate.SystemLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Contents")
                        .HasColumnType("jsonb")
                        .HasColumnName("contents");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_system_logs");

                    b.ToTable("system_logs", "integration");
                });

            modelBuilder.Entity("Integration.Domain.ECommerceAggregateModels.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<decimal>("Liabilities")
                        .HasColumnType("numeric")
                        .HasColumnName("liabilities");

                    b.Property<decimal>("MaxLiabilities")
                        .HasColumnType("numeric")
                        .HasColumnName("max_liabilities");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.ToTable("customers", "public", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Integration.Domain.ECommerceAggregateModels.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string[]>("Images")
                        .HasColumnType("text[]")
                        .HasColumnName("images");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.ToTable("products", "public", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Integration.Domain.ECommerceAggregateModels.ProductChild", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<long>("QuantityInStock")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("quantity_in_stock");

                    b.HasKey("Id")
                        .HasName("pk_product_children");

                    b.ToTable("product_children", "public", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Integration.Domain.OrderAggregateModels.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<long>("OrderNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("order_number");

                    b.Property<string>("SaasCode")
                        .HasColumnType("text")
                        .HasColumnName("saas_code");

                    b.Property<string>("StaffName")
                        .HasColumnType("text")
                        .HasColumnName("staff_name");

                    b.Property<string>("StaffPhone")
                        .HasColumnType("text")
                        .HasColumnName("staff_phone");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.ToTable("orders", "order", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Integration.Domain.OrderAggregateModels.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AttributeValues")
                        .HasColumnType("jsonb")
                        .HasColumnName("attribute_values");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uuid")
                        .HasColumnName("brand_id");

                    b.Property<string>("BrandName")
                        .HasColumnType("text")
                        .HasColumnName("brand_name");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_id");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<decimal>("DiscountPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("discount_price");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("LastUpdatedById")
                        .HasColumnType("uuid")
                        .HasColumnName("last_updated_by_id");

                    b.Property<DateTimeOffset>("LastUpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated_date");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_category_id");

                    b.Property<string>("ProductCategoryName")
                        .HasColumnType("text")
                        .HasColumnName("product_category_name");

                    b.Property<Guid>("ProductChildId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_child_id");

                    b.Property<string>("ProductChildName")
                        .HasColumnType("text")
                        .HasColumnName("product_child_name");

                    b.Property<string>("ProductChildSku")
                        .HasColumnType("text")
                        .HasColumnName("product_child_sku");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductImage")
                        .HasColumnType("text")
                        .HasColumnName("product_image");

                    b.Property<string>("ProductName")
                        .HasColumnType("text")
                        .HasColumnName("product_name");

                    b.Property<string>("ProductSku")
                        .HasColumnType("text")
                        .HasColumnName("product_sku");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint")
                        .HasColumnName("quantity");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("uuid")
                        .HasColumnName("shop_id");

                    b.Property<string>("ShopName")
                        .HasColumnType("text")
                        .HasColumnName("shop_name");

                    b.HasKey("Id")
                        .HasName("pk_order_details");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_details_order_id");

                    b.ToTable("order_details", "order", t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("Integration.Domain.OrderAggregateModels.OrderDetail", b =>
                {
                    b.HasOne("Integration.Domain.OrderAggregateModels.Order", "Order")
                        .WithMany("Details")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("fk_order_details_orders_order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Integration.Domain.OrderAggregateModels.Order", b =>
                {
                    b.Navigation("Details");
                });
#pragma warning restore 612, 618
        }
    }
}
